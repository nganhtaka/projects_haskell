*Main> evalue (Div (Nombre 1) (Nombre 0))
*** Exception: divide by zero
*Main> :t sousJust (+)
sousJust (+) :: Num a => Maybe a -> Maybe (a -> a)
*Main> [id, (+1000)] <*> [1..3]
[1,2,3,1001,1002,1003]
*Main> ex2
ZipList {getZipList = [1,1002]}
*Main> :type paires
paires :: Monad m => m a1 -> m a2 -> m (a1, a2)
*Main> :type paires getChar getChar
paires getChar getChar :: IO (Char, Char)
*Main> paires getChar getChar
ab('a','b')
*Main> paires (Just 12) (Just 45)
Just (12,45)
*Main> paires [12,34] [45,67]
[(12,45),(12,67),(34,45),(34,67)]
